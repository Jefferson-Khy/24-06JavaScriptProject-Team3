declare module "@moovio/moov-js" {
  type AccountType = "business" | "individual";
  type BusinessType = "corporation" | "partnership" | "llc" | "sole-proprietorship" | "non-profit";
  type BankAccountType = "checking" | "savings" | "unknown";
  type BankAccountStatusType = "new" | "validated" | "pending" | "errored";
  type Account = {
    accountID: string;
    foreignID?: string;
    accountType: AccountType;
    displayName: string;
    profile: {
      individual?: IndividualProfile;
      business?: BusinessProfile;
    };
    metadata?: {};
    termsOfService?: {
      acceptedIP: string;
      acceptedDate: string;
    };
  };
  type NewAccount = {
    foreignID?: string;
    accountType: AccountType;
    profile: {
      individual?: IndividualProfile;
      business?: BusinessProfile;
    };
    metadata?: {};
    termsOfService?: {
      token: string;
    };
  };
  type Card = {
    cardNumber: string;
    expiration: {
      month: string;
      year: string;
    };
    cardCvv: string;
    holderName: string;
    billingAddress: Address;
  };
  type BankAccount = {
    bankAccountID: string;
    fingerprint?: string;
    status?: BankAccountStatusType;
    holderName?: string;
    holderType?: string;
    bankName?: string;
    bankAccountType?: BankAccountType;
    routingNumber?: string;
    lastFourAccountNumber?: string;
  };
  type NewBankAccount = {
    holderName: string;
    holderType: string;
    accountNumber: string;
    bankAccountType: "checking" | "savings";
    routingNumber: string;
  };
  type PaymentMethod = {
    paymentMethodID: string;
    paymentMethodType: string;
    bankAccount?: BankAccount;
    wallet?: Wallet;
    card?: Card;
  };
  type Wallet = {
    walletID: string;
    availableBalance: { currency: string, value: number };
  };
  type Capability = {
    capability: CapabilityID;
    accountID: string;
    status: string;
    requirements: {
      currentlyDue?: string[];
      errors?: {
        requirement: string;
        errorCode: string;
      }[];
      disabledReason?: string[];
    };
  };
  type CapabilityID =
    | "transfers"
    | "send-funds"
    | "collect-funds"
    | "wallet"
    | "receive-1099-nec"
    | "receive-1099-k";
  type Representative = {
    representativeID: string;
    name: {
      firstName: string;
      middleName: string;
      lastName: string;
      suffix: string;
    };
    phone: {
      number: string;
      countryCode: string;
    };
    email: string;
    address: Address;
    birthDate: {
      day: number;
      month: number;
      year: number;
    };
    governmentID: {
      ssn?: {
        full?: string;
        lastFour: string;
      };
      itin?: {
        full: string;
        lastFour: string;
      };
      passport?: {
        full: string;
        lastFour: string;
      };
    };
    responsibilities: {
      isController: boolean;
      isOwner: boolean;
      ownershipPercentage: number;
      jobTitle: string;
    };
    createdOn: string;
  };
  type NewRepresentative = {
    name: {
      firstName: string;
      middleName: string;
      lastName: string;
      suffix: string;
    };
    phone: {
      number: string;
      countryCode: string;
    };
    email: string;
    address: Address;
    birthDate: {
      day: number;
      month: number;
      year: number;
    };
    governmentID: {
      ssn?: {
        full?: string;
        lastFour: string;
      };
      itin?: {
        full: string;
        lastFour: string;
      };
      passport?: {
        full: string;
        lastFour: string;
      };
    };
    responsibilities: {
      isController: boolean;
      isOwner: boolean;
      ownershipPercentage: number;
      jobTitle: string;
    };
  };
  type BusinessProfile = {
    legalBusinessName: string;
    doingBusinessAs?: string;
    businessType: BusinessType;
    address?: Address;
    phone?: {
      number: string;
      countryCode: string;
    };
    email?: string;
    website?: string;
    description?: string;
    taxID?: {
      ein: {
        number: string;
      };
    };
    ownersProvided?: boolean;
    industryDetails?: {
      naics?: string;
      sic?: string;
      mcc?: string;
    };
  };
  type IndividualProfile = {
    name: {
      firstName: string;
      middleName?: string;
      lastName: string;
      suffix?: string;
    };
    phone?: {
      number: string;
      countryCode: string;
    };
    email: string;
    address?: Address;
    birthDate?: {
      day: number;
      month: number;
      year: number;
    };
    governmentID?: {
      ssn?: {
        full?: string;
        lastFour: string;
      };
      itin?: {
        full: string;
        lastFour: string;
      };
      passport?: {
        full: string;
        lastFour: string;
      };
    };
    responsibilities?: {
      isController: boolean;
      isOwner: boolean;
      ownershipPercentage: number;
      jobTitle: string;
    };
  };
  type Address = {
    addressLine1: string;
    addressLine2?: string;
    city: string;
    stateOrProvince: string;
    postalCode: string;
    country: string;
  };
  type AccountQueryParams = {
    query?: string;
    email?: string;
    status?: string;
    accountType?: "individual" | "business";
    skip?: number;
    count?: number;
    accountIDs?: string[];
  };
  type EnrichmentResponse = {
    individual: {
      firstName: string;
      middleName: string;
      lastName: string;
      suffix: string;
    };
    email: string;
    address: Address;
    business: {
      legalBusinessName: string;
      address: {
        addressLine1: string;
        addressLine2: string;
        city: string;
        stateOrProvince: string;
        postalCode: string;
        country: string;
      };
      email: string;
      phone: {
        number: string;
        countryCode: string;
      };
      industryCodes: {
        naics: string;
        sic: string;
      };
      website: string;
    };
  };
  interface ApplePaySessionConfig {
    displayName: string;
  }
  interface ApplePayPaymentToken {
    token: {
      paymentData: {
        version: string;
        data: string;
        signature: string;
        header: {
          ephemeralPublicKey: string;
          publicKeyHash: string;
          transactionID: string;
        }
      };
      paymentMethod: {
        displayName: string;
        network: string;
        type: string;
      };
      transactionIdentifier: string;
    }
  }
  interface LinkedApplePayPaymentMethod {
    paymentMethodID: string;
    paymentMethodType: string;
    applePay: LinkedApplePayToken;
  }
  interface LinkedApplePayToken {
    brand: "American Express" | "Discover" | "Mastercard" | "Visa";
    cardType: "debit" | "credit" | "prepaid" | "unknown";
    cardDisplayName: string;
  }
  type FilePurpose = "identity_verification"
    | "business_verification"
    | "merchant_underwriting"
    | "account_requirement"
  interface AccountFile {
    fileID: string;
    fileName: string;
    filePurpose: FilePurpose;
    fileStatus: "pending" | "approved" | "rejected";
    fileSizeBytes: number;
    accountID: string;
  }
  interface AccountUnderwriting {
    averageTransactionSize?: number;
    maxTransactionSize?: number;
    averageMonthlyTransactionVolume?: number;
  }
  type WalletTransactionType =
    | "ach-reversal"
    | "card-payment"
    | "cash-out"
    | "dispute"
    | "dispute-reversal"
    | "facilitator-fee"
    | "issuing-refund"
    | "issuing-transaction"
    | "issuing-transaction-adjustment"
    | "issuing-auth-release"
    | "payment"
    | "payout"
    | "refund"
    | "refund-failure"
    | "top-up"
    | "wallet-transfer";
  type WalletTransactionSourceType = "transfer" | "dispute" | "issuing-transaction";
  type WalletTransactionStatus = "pending" | "completed" | "failed";
  interface WalletTransaction {
      walletID: string;
      transactionID: string;
      transactionType: WalletTransactionType;
      sourceType: WalletTransactionSourceType;
      sourceID: string;
      status: WalletTransactionStatus;
      memo: string;
      createdOn: string;
      completedOn?: string;
      currency: string;
      grossAmount: number;
      fee: number;
      netAmount: number;
      availableBalance: number;
  }
  interface WalletTransactionsFilter {
    count?: number;
    skip?: number;
    transactionType?: WalletTransactionType;
    sourceType?: WalletTransactionSourceType;
    sourceID?: string;
    status?: WalletTransactionStatus;
    createdStartDateTime?: string;
    createdEndDateTime?: string;
    completedStartDateTime?: string;
    completedEndDateTime?: string;
  }
  interface Enrichment {
    lookup: (params: { email: string }) => Promise<EnrichmentResponse>;
    avatar: (params: { avatarID: string }) => Promise<string>;
  }
  interface Accounts {
    create: (params: NewAccount) => Promise<Account>;
    get: (params: { accountID?: string; foreignID?: string }) => Promise<Account>;
    update: (params: NewAccount) => Promise<string>;
    patch: (params: Partial<NewAccount>) => Promise<string>;
    getTermsOfServiceToken: () => Promise<TermsOfServiceToken>;
    acceptTermsOfService: (params: { accountID: string }) => Promise<string>;
    applePay: ApplePay;
    bankAccounts: BankAccounts;
    capabilities: Capabilities;
    files: Files;
    representatives: Representatives;
    paymentMethods: PaymentMethods;
    underwriting: AccountUnderwritings;
  }
  interface ApplePaySessions {
    create: (params: { accountID: string, applePaySessionConfig: ApplePaySessionConfig }) => Promise<any>;
  }
  interface ApplePayTokens {
    create: (params: { accountID: string, applePayToken: ApplePayPaymentToken }) => Promise<LinkedApplePayPaymentMethod>;
  }
  interface ApplePay {
    sessions: ApplePaySessions;
    tokens: ApplePayTokens;
  }
  interface BankAccounts {
    link: (params: { accountID: string; bankAccount: NewBankAccount }) => Promise<BankAccount>;
    list: (params: { accountID: string }) => Promise<BankAccount[]>;
    get: (params: { accountID: string; bankAccountID: string }) => Promise<BankAccount>;
    delete: (params: { accountID: string; bankAccountID: string }) => Promise<string>;
    startMicroDepositVerification: (params: { accountID: string; bankAccountID: string }) => Promise<string>;
    completeMicroDepositVerification: (params: {
      accountID: string;
      bankAccountID: string;
      amounts: Number[];
    }) => Promise<string>;
  }
  interface Cards {
    list: (params: { accountID: string }) => Promise<Card[]>;
    get: (params: { accountID: string; cardID: string }) => Promise<Card>;
    disable: (params: { accountID: string; cardID: string }) => Promise<string>;
  }
  interface Files {
    upload: (params: { accountID: string, file: File, filePurpose: FilePurpose }) => Promise<AccountFile>;
    list: (params: { accountID: string }) => Promise<AccountFile[]>;
    get: (params: { accountID: string, fileID: string }) => Promise<AccountFile>;
  }
  interface Representatives {
    get: (params: { accountID: string; representativeID: string }) => Promise<Representative>;
    list: (params: { accountID: string }) => Promise<Representative[]>;
    create: (params: { accountID: string; representative: NewRepresentative }) => Promise<Representative>;
    update: (params: { accountID: string; representative: NewRepresentative }) => Promise<Representative>;
    delete: (params: { accountID: string; representativeID: string }) => Promise<string>;
  }
  interface PaymentMethods {
    get: (params: { accountID: string; paymentMethodID: string }) => Promise<PaymentMethod>;
    list: (params: { accountID: string }) => Promise<PaymentMethod[]>;
  }
  interface Capabilities {
    get: (params: { accountID: string; capabilityID: string }) => Promise<Capability>;
    list: (params: { accountID: string }) => Promise<Capability[]>;
    request: (params: { accountID: string; capabilities: CapabilityID[] }) => Promise<string>;
    unrequest: (params: { accountID: string; capabilityID: CapabilityID }) => Promise<string>;
  }
  interface AccountUnderwritings {
    get: (params: { accountID: string; }) => Promise<AccountUnderwriting>;
    update: (params: { accountID: string; facilitatorID: string, underwriting: AccountUnderwriting }) => Promise<AccountUnderwriting>;
  }
  interface Wallets {
    get: (params: { accountID: string; walletID: string }) => Promise<Wallet>;
    list: (params: { accountID: string }) => Promise<Wallet[]>;
    getTransaction: (params: {
        accountID: string;
        walletID: string;
        transactionID: string;
    }) => Promise<WalletTransaction>;
    listTransactions: (params: {
        accountID: string;
        walletID: string;
        filter?: WalletTransactionsFilter;
    }) => Promise<WalletTransaction[]>;
  }
  type TermsOfServiceToken = {
    token: string;
  };
}
