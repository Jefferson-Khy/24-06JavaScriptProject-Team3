declare module "@moovio/moov-js" {
  type AllowableCardBrand = "visa" | "mastercard" | "american-express" | "diners-club" | "discover" | "jcb" | "unionpay" | "maestro" | "mir" | "elo" | "hiper" | "hipercard";

  interface CardLinkProps {
    inputStyle?: object;
    oauthToken: string;
    accountID: string;
    validationEvent: "submit" | "change" | "keydown" | "none";
    onEnterKeyPress?: () => void;
    onError?: (message: string) => void;
    onValidated?: () => void;
    onSuccess?: (card: object) => void;
    holderName?: string;
    allowedCardBrands?: AllowableCardBrand[];
    billingAddress?: Address;
  }

  type ResourceType = "account" | "representative" | "bankAccount" | "capabilities" | "card";
  type OnResourceCreated = (props: {
    resourceType: ResourceType;
    resource: Account | Representative | BankAccount | Capability | Card;
  }) => void;
  type OnError = (props: {
    errorType: ResourceType | "enrichment" | "address" | "facilitator" | "token" | "error";
    error: Error;
  }) => void;
  type OnboardingMode =  "createAccount" | "createRepresentative" | "addPaymentMethod" | "editAccount" | "editRepresentative";
  type PaymentMethodType = "card" | "bankAccount";

  interface OnboardingProps {
    token: string;
    facilitatorAccountID?: string;
    accountData?: Partial<Account>;
    capabilities?: CapabilityID[];
    open?: boolean;
    onResourceCreated?: OnResourceCreated;
    onError?: OnError;
    onCancel?: () => void;
    onSuccess?: () => void;
    plaid?: PlaidInitProps;
    onPlaidRedirect?: (restoredProperties: any) => {};
    paymentMethodTypes?: PaymentMethodType[];
    allowedCardBrands?: AllowableCardBrand[];
    microDeposits?: boolean;
  }

  interface PaymentMethodsProps extends Omit<OnboardingProps, "capabilities" | "mode"> {
    accountID: string;
  }

  interface IssuedCardProps {
    oauthToken: string;
    accountID: string;
    issuedCardID: string;
  }

  interface FileUploadProps {
    token: string;
    accountID: string;
    open?: boolean;
    onError?: OnError;
    onCancel?: () => void;
    onSuccess?: () => void;
  }

  interface FormProps {
    /** Unique name assigned to this form */
    name: string;
    /** HTTP method used on form submission */
    method?: "GET" | "POST" | "PATCH" | "PUT";
    /** URL destination for form submission */
    action: string;
    /** An object of request headers added to the form submission request */
    requestHeaders?: Record<string, string>;
    /** Object of default values included in the form submission request. FormInput values will override the properties provided here. */
    requestBody?: any;
    /** Fired after a successful form submission */
    onSuccess?: (response: Response) => void;
    /** Fired after a failed form submission */
    onError?: (response?: Response) => void;
    /** Fired after a validity check runs on the form  */
    onCheckValidity?: (isValid: boolean) => void;
    /** Fired after a validity report runs on the form */
    onReportValidity?: (isValid: boolean) => void;
  }

  interface TextInputProps {
    /** The default value of the input on first load */
    defaultValue?: string;
    /** Prompts the users device to display certain keyboards */
    inputmode?: string;
    /** Unique name assigned to this text input */
    name: string;
    /** The name of the form to which this text input is registered */
    formName: string;
    /** The value of the input. Writeable, but not readable. User input will override this value */
    value?: string;
    /** If true, this input is disabled, preventing user input */
    disabled?: boolean;
    /** If true, this input is required for form submission */
    required?: boolean;
    /** If true, enables browser autocomplete features on this input */
    autocomplete?: boolean;
    /** Maximum number of characters allowed in this input */
    maxLength?: number;
    /** Minimum number of characters allowed in this input */
    minLength?: number;
    /** A regex string specifying the expected structure for this input's value */
    pattern?: string;
    /** Placeholder text displayed when the input has no value */
    placeholder?: string;
    /** If true, input value cannot be edited by a user */
    readOnly?: boolean;
    /** Expected number of characters in this input */
    size?: number;
    /** A record of camelCased CSS variables, passed to the input element within the iframe.
     * For user convenience, inheritable styles such as color, font-size, and font-family are applied automatically. */
    inputStyle?: any;
    /** Fired when the user changes the input value */
    onInput?: () => void;
    /** Fired when the user navigates away from the input */
    onChange?: () => void;
    /** Fired when the user focuses the input */
    onFocus?: () => void;
    /** Fired when the input loses focus */
    onBlur?: () => void;
    /** Fired when the input fails a validation check */
    onInvalid?: () => void;
    /** Fired when the user presses the enter key while focusing the input */
    onEnterKeyPress?: () => void;
    /** Fired after a validity check runs on the input  */
    onCheckValidity?: (isValid: boolean) => void;
    /** Fired after a validity report runs on the input */
    onReportValidity?: (isValid: boolean) => void;
  }

  interface CardNumberInputProps {
    /** Unique name assigned to this text input */
    name: string;
    /** The name of the form to which this text input is registered */
    formName: string;
    /** If true, this input is disabled, preventing user input */
    disabled?: boolean;
    /** If true, this input is required for form submission */
    required?: boolean;
    /** Placeholder text displayed when the input has no value */
    placeholder?: string;
    /** If true, input value cannot be edited by a user */
    readOnly?: boolean;
    /** Expected number of characters in this input */
    size?: number;
    /** A record of camelCased CSS variables, passed to the input element within the iframe.
     * For user convenience, inheritable styles such as color, font-size, and font-family are applied automatically. */
    inputStyle?: any;
    /** An array of valid card brands for the input. The input will be invalid if the provided card brand is not included in this array. */
    allowedCardBrands?: AllowableCardBrand[];
    /** Fired when the user changes the input value */
    onInput?: () => void;
    /** Fired when the user navigates away from the input */
    onChange?: () => void;
    /** Fired when the user focuses the input */
    onFocus?: () => void;
    /** Fired when the input loses focus */
    onBlur?: () => void;
    /** Fired when the input fails a validation check */
    onInvalid?: () => void;
    /** Fired when the user presses the enter key while focusing the input */
    onEnterKeyPress?: () => void;
    /** Fired after a validity check runs on the input  */
    onCheckValidity?: (isValid: boolean) => void;
    /** Fired after a validity report runs on the input */
    onReportValidity?: (isValid: boolean) => void;
    /** Fired when the detected card brand changes */
    onBrandChange?: (brand: AllowableCardBrand) => void;
  }

  interface CardSecurityCodeInputProps {
    /** Unique name assigned to this text input */
    name: string;
    /** The name of the form to which this text input is registered */
    formName: string;
    /** If true, this input is disabled, preventing user input */
    disabled?: boolean;
    /** If true, this input is required for form submission */
    required?: boolean;
    /** Placeholder text displayed when the input has no value */
    placeholder?: string;
    /** If true, input value cannot be edited by a user */
    readOnly?: boolean;
    /** Expected number of characters in this input */
    size?: number;
    /** A record of camelCased CSS variables, passed to the input element within the iframe.
     * For user convenience, inheritable styles such as color, font-size, and font-family are applied automatically. */
    inputStyle?: any;
    /** Fired when the user changes the input value */
    onInput?: () => void;
    /** Fired when the user navigates away from the input */
    onChange?: () => void;
    /** Fired when the user focuses the input */
    onFocus?: () => void;
    /** Fired when the input loses focus */
    onBlur?: () => void;
    /** Fired when the input fails a validation check */
    onInvalid?: () => void;
    /** Fired when the user presses the enter key while focusing the input */
    onEnterKeyPress?: () => void;
    /** Fired after a validity check runs on the input  */
    onCheckValidity?: (isValid: boolean) => void;
    /** Fired after a validity report runs on the input */
    onReportValidity?: (isValid: boolean) => void;
  }

  interface ExpirationDateInputProps {
    /** The default value of the input on first load */
    defaultValue?: string;
    /** Unique name assigned to this text input */
    name: string;
    /** The name of the form to which this text input is registered */
    formName: string;
    /** The value of the input. Writeable, but not readable. User input will override this value */
    value?: string;
    /** If true, this input is disabled, preventing user input */
    disabled?: boolean;
    /** If true, this input is required for form submission */
    required?: boolean;
    /** If true, input value cannot be edited by a user */
    readOnly?: boolean;
    /** Expected number of characters in this input */
    size?: number;
    /** A record of camelCased CSS variables, passed to the input element within the iframe.
     * For user convenience, inheritable styles such as color, font-size, and font-family are applied automatically. */
    inputStyle?: any;
    /** Fired when the user changes the input value */
    onInput?: () => void;
    /** Fired when the user navigates away from the input */
    onChange?: () => void;
    /** Fired when the user focuses the input */
    onFocus?: () => void;
    /** Fired when the input loses focus */
    onBlur?: () => void;
    /** Fired when the input fails a validation check */
    onInvalid?: () => void;
    /** Fired when the user presses the enter key while focusing the input */
    onEnterKeyPress?: () => void;
    /** Fired after a validity check runs on the input  */
    onCheckValidity?: (isValid: boolean) => void;
    /** Fired after a validity report runs on the input */
    onReportValidity?: (isValid: boolean) => void;
  }

  interface Drops {
    cardLink: (config: CardLinkProps, elementID?: string) => void;
    onboarding: (config: OnboardingProps, elementID?: string) => void;
    paymentMethods: (config: PaymentMethodsProps, elementID?: string) => void;
    fileUpload: (config: FileUploadProps, elementID?: string) => void;
    issuedCard: (config: IssuedCardProps, elementID?: string) => void;
    form: (config: FormProps, elementID?: string) => void;
    textInput: (config: TextInputProps, elementID?: string) => void;
    cardNumberInput: (config: CardNumberInputProps, elementID?: string) => void;
    cardSecurityCodeInput: (config: CardSecurityCodeInputProps, elementID?: string) => void;
    expirationDateInput: (config: ExpirationDateInputProps, elementID?: string) => void;
  }
}
