const URL = "https://js.moov.io/v1";
const URL_REGEX = /^https:\/\/js\.moov\.io\/v1\/?(\?.*)?$/;
const EXISTING_SCRIPT_MESSAGE = "loadMoov.setLoadParameters was called but an existing Moov.js script already exists in the document; existing script parameters will be used";
const findScript = () => {
  const scripts = document.querySelectorAll(`script[src^="${URL}"]`);

  for (let i = 0; i < scripts.length; i++) {
    const script = scripts[i];

    if (!URL_REGEX.test(script.src)) {
      continue;
    }

    return script;
  }

  return null;
};

const injectScript = () => {
  const script = document.createElement("script");
  script.src = URL;
  const headOrBody = document.head || document.body;

  if (!headOrBody) {
    throw new Error("Expected document.body not to be null. Moov.js requires a <body> element.");
  }

  headOrBody.appendChild(script);
  return script;
};

let moovPromise$1 = null;
const loadScript = () => {
  // Ensure that we only attempt to load Moov.js at most once
  if (moovPromise$1 !== null) {
    return moovPromise$1;
  }

  moovPromise$1 = new Promise((resolve, reject) => {
    if (typeof window === "undefined") {
      // Resolve to null when imported server side. This makes the module
      // safe to import in an isomorphic code base.
      resolve(null);
      return;
    }

    if (window.Moov) {
      console.warn(EXISTING_SCRIPT_MESSAGE);
    }

    if (window.Moov) {
      resolve(window.Moov);
      return;
    }

    try {
      let script = findScript();

      if (script) {
        console.warn(EXISTING_SCRIPT_MESSAGE);
      } else if (!script) {
        script = injectScript();
      }

      script.addEventListener("load", () => {
        if (window.Moov) {
          resolve(window.Moov);
        } else {
          reject(new Error("Moov.js not available"));
        }
      });
      script.addEventListener("error", () => {
        reject(new Error("Failed to load Moov.js"));
      });
    } catch (error) {
      reject(error);
      return;
    }
  });
  return moovPromise$1;
};
const initMoov = (moovFunction, args) => {
  if (moovFunction === null) {
    return null;
  }

  const moov = moovFunction.apply(undefined, args);
  return moov;
};

const moovPromise = Promise.resolve().then(() => loadScript());
let loadCalled = false;
moovPromise.catch(err => {
  if (!loadCalled) {
    console.warn(err);
  }
});
function loadMoov(...args) {
  if (!window) {
    throw new Error("@moovio/moov-js is intended for browser use only. For a server-side solution, try @moovio/node."); // @ts-ignore
  }

  loadCalled = true;
  return moovPromise.then(moovFunction => initMoov(moovFunction, args));
}

export { loadMoov };
